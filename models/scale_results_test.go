// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testScaleResults(t *testing.T) {
	t.Parallel()

	query := ScaleResults()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testScaleResultsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScaleResult{}
	if err = randomize.Struct(seed, o, scaleResultDBTypes, true, scaleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScaleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ScaleResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testScaleResultsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScaleResult{}
	if err = randomize.Struct(seed, o, scaleResultDBTypes, true, scaleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScaleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ScaleResults().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ScaleResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testScaleResultsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScaleResult{}
	if err = randomize.Struct(seed, o, scaleResultDBTypes, true, scaleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScaleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ScaleResultSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ScaleResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testScaleResultsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScaleResult{}
	if err = randomize.Struct(seed, o, scaleResultDBTypes, true, scaleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScaleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ScaleResultExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ScaleResult exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ScaleResultExists to return true, but got false.")
	}
}

func testScaleResultsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScaleResult{}
	if err = randomize.Struct(seed, o, scaleResultDBTypes, true, scaleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScaleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	scaleResultFound, err := FindScaleResult(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if scaleResultFound == nil {
		t.Error("want a record, got nil")
	}
}

func testScaleResultsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScaleResult{}
	if err = randomize.Struct(seed, o, scaleResultDBTypes, true, scaleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScaleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ScaleResults().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testScaleResultsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScaleResult{}
	if err = randomize.Struct(seed, o, scaleResultDBTypes, true, scaleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScaleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ScaleResults().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testScaleResultsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scaleResultOne := &ScaleResult{}
	scaleResultTwo := &ScaleResult{}
	if err = randomize.Struct(seed, scaleResultOne, scaleResultDBTypes, false, scaleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScaleResult struct: %s", err)
	}
	if err = randomize.Struct(seed, scaleResultTwo, scaleResultDBTypes, false, scaleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScaleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = scaleResultOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = scaleResultTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ScaleResults().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testScaleResultsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	scaleResultOne := &ScaleResult{}
	scaleResultTwo := &ScaleResult{}
	if err = randomize.Struct(seed, scaleResultOne, scaleResultDBTypes, false, scaleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScaleResult struct: %s", err)
	}
	if err = randomize.Struct(seed, scaleResultTwo, scaleResultDBTypes, false, scaleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScaleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = scaleResultOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = scaleResultTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ScaleResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func scaleResultBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ScaleResult) error {
	*o = ScaleResult{}
	return nil
}

func scaleResultAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ScaleResult) error {
	*o = ScaleResult{}
	return nil
}

func scaleResultAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ScaleResult) error {
	*o = ScaleResult{}
	return nil
}

func scaleResultBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ScaleResult) error {
	*o = ScaleResult{}
	return nil
}

func scaleResultAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ScaleResult) error {
	*o = ScaleResult{}
	return nil
}

func scaleResultBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ScaleResult) error {
	*o = ScaleResult{}
	return nil
}

func scaleResultAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ScaleResult) error {
	*o = ScaleResult{}
	return nil
}

func scaleResultBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ScaleResult) error {
	*o = ScaleResult{}
	return nil
}

func scaleResultAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ScaleResult) error {
	*o = ScaleResult{}
	return nil
}

func testScaleResultsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ScaleResult{}
	o := &ScaleResult{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, scaleResultDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ScaleResult object: %s", err)
	}

	AddScaleResultHook(boil.BeforeInsertHook, scaleResultBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	scaleResultBeforeInsertHooks = []ScaleResultHook{}

	AddScaleResultHook(boil.AfterInsertHook, scaleResultAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	scaleResultAfterInsertHooks = []ScaleResultHook{}

	AddScaleResultHook(boil.AfterSelectHook, scaleResultAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	scaleResultAfterSelectHooks = []ScaleResultHook{}

	AddScaleResultHook(boil.BeforeUpdateHook, scaleResultBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	scaleResultBeforeUpdateHooks = []ScaleResultHook{}

	AddScaleResultHook(boil.AfterUpdateHook, scaleResultAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	scaleResultAfterUpdateHooks = []ScaleResultHook{}

	AddScaleResultHook(boil.BeforeDeleteHook, scaleResultBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	scaleResultBeforeDeleteHooks = []ScaleResultHook{}

	AddScaleResultHook(boil.AfterDeleteHook, scaleResultAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	scaleResultAfterDeleteHooks = []ScaleResultHook{}

	AddScaleResultHook(boil.BeforeUpsertHook, scaleResultBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	scaleResultBeforeUpsertHooks = []ScaleResultHook{}

	AddScaleResultHook(boil.AfterUpsertHook, scaleResultAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	scaleResultAfterUpsertHooks = []ScaleResultHook{}
}

func testScaleResultsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScaleResult{}
	if err = randomize.Struct(seed, o, scaleResultDBTypes, true, scaleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScaleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ScaleResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testScaleResultsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScaleResult{}
	if err = randomize.Struct(seed, o, scaleResultDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ScaleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(scaleResultColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ScaleResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testScaleResultsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScaleResult{}
	if err = randomize.Struct(seed, o, scaleResultDBTypes, true, scaleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScaleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testScaleResultsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScaleResult{}
	if err = randomize.Struct(seed, o, scaleResultDBTypes, true, scaleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScaleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ScaleResultSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testScaleResultsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScaleResult{}
	if err = randomize.Struct(seed, o, scaleResultDBTypes, true, scaleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScaleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ScaleResults().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	scaleResultDBTypes = map[string]string{`ID`: `INTEGER`, `Date`: `VARCHAR(255)`, `Weight`: `REAL`, `Bmi`: `REAL`, `BodyFatPercentage`: `REAL`, `WaterPercentage`: `REAL`, `MuscleMassPercentage`: `REAL`, `BoneMassPercentage`: `REAL`, `BasalMetabolicRate`: `REAL`, `VisceralFat`: `REAL`, `LeanBodyMass`: `REAL`, `BodyFatMass`: `REAL`, `BoneMass`: `REAL`, `MuscleMass`: `REAL`, `BodyAge`: `REAL`, `ProteinPercentage`: `REAL`}
	_                  = bytes.MinRead
)

func testScaleResultsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(scaleResultPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(scaleResultAllColumns) == len(scaleResultPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ScaleResult{}
	if err = randomize.Struct(seed, o, scaleResultDBTypes, true, scaleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScaleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ScaleResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, scaleResultDBTypes, true, scaleResultPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ScaleResult struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testScaleResultsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(scaleResultAllColumns) == len(scaleResultPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ScaleResult{}
	if err = randomize.Struct(seed, o, scaleResultDBTypes, true, scaleResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScaleResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ScaleResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, scaleResultDBTypes, true, scaleResultPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ScaleResult struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(scaleResultAllColumns, scaleResultPrimaryKeyColumns) {
		fields = scaleResultAllColumns
	} else {
		fields = strmangle.SetComplement(
			scaleResultAllColumns,
			scaleResultPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ScaleResultSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
